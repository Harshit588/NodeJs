
Complete notes of NodeJS =>

1. setup => Download and install NodeJS
    check version => node -v
    check npm version => npm -v 
    check node version => node --version

    npm init => Create a package.json file (
        package name: "default",
        version: "1.0.0",
        description: "default",
        entry point: "app.js",  
        test command: 
        git repository: "default",
        keywords: "default",
        author: "default",
        license: "ISC",   
        ) -> create package.json file(Configuration file)
                     or
    npm init -y => Create a package.json file with default values

    npm install => Install all the dependencies

2. Hello World
    - Create a file named app.js
    - Write the following code in app.js
        console.log("Hello World");
    - Run the file using the command => node app.js
    - Output => Hello World

    Inside package.json file
        "scripts": {
            "start": "node app.js"
        }
    - Run the file using the command => npm start
    - Output => Hello World

3. Modules in NodeJS => 
    - Create a file named Math.js
    - create a file named App.js 

        - Write the following code in Math.js
            function add(a, b) {
                return a + b;
            }
            function sub(a, b) {
                return a - b;
            }
            function mul(a, b) {
                return a * b;
            }
            function div(a, b) {
                return a / b;
            }

            // Export the functions (to exports multiple functions use object{} or module.exports)
            1. Using module.exports
                module.exports.add = add;
                module.exports.sub = sub;
                module.exports.mul = mul;
                module.exports.div = div;

            2. Using object
                module.exports = {
                    add: add,
                    sub: sub,
                    mul: mul,
                    div: div
                };

            // 3. Using ES6 shorthand syntax
            // const add = (a, b) => a + b;
            // const sub = (a, b) => a - b;
            // const mul = (a, b) => a * b;
            // const div = (a, b) => a / b;     
            // module.exports = { add, sub, mul, div };
            module.exports = { add, sub, mul, div };

        - Write the following code in App.js =>

            // Import the Math module
            const math = require('./Math.js');
            console.log(math.add(2, 3));
            console.log(math.sub(5, 3));
            console.log(math.mul(2, 3));
            console.log(math.div(6, 3));
    Summary => 
        - Create a file named Math.js
        - Write the functions in Math.js
        - Export the functions using module.exports or exports
        - Create a file named App.js
        - Import the Math module using require()
        - Use the functions in App.js
        - Run the file using the command => node App.js
        - Output => 5, 2, 6, 2

4. File Handling => 

    require('fs') => File System module

        operations 1 => create a file in Current Directory 
            - Create a file named test.txt
            - Write the following code in test.txt
                Hii Harshit 1 times...
            - Write the following code in app.js -> in sync way
                    var fs = require('fs');
                    fs.writeFileSync('./test.txt', 'Hii Harshit 1 times...')
            
            - Write the following code in app.js -> in async way
                    var fs = require('fs');
                    fs.writeFile('./test.txt', 'Hii Harshit 1 times...', function(err) {
                        if (err) throw err;
                        console.log('File created!');
                    });
                - Output => File created!
           
            - Write the following code in app.js -> in async way with callback
                    var fs = require('fs');
                    fs.writeFile('./test.txt', 'Hii Harshit 1 times...', (err) => {
                        if (err) throw err;
                        console.log('File created!');
                    });
                - Output => File created!


        operations 2 => Read a file in Current Directory
            - Write the following code in app.js -> in sync way
                    var fs = require('fs');
                    var data = fs.readFileSync('./test.txt', 'utf8');
                    console.log(data);
                //utf8 is the encoding format
                - Output => Hii Harshit 1 times...
           
            - Write the following code in app.js -> in async way
                    var fs = require('fs');
                    fs.readFile('./test.txt', 'utf8', (err, data) => {
                        if (err) throw err;
                        console.log(data);
                    });
                - Output => Hii Harshit 1 times...
            
            - Write the following code in app.js -> in async way with callback
                    var fs = require('fs');
                    fs.readFile('./test.txt', 'utf8', (err, data) => {
                        if (err) throw err;
                        console.log(data);
                    });
                - Output => Hii Harshit 1 times...

        operations 3 => Append a file in Current Directory
            - Write the following code in app.js -> in sync way
                    var fs = require('fs');
                    fs.appendFileSync('./test.txt', 'Hii Harshit 2 times...')
                - Output => Hii Harshit 1 times...Hii Harshit 2 times...
            
            - Write the following code in app.js -> in async way
                    var fs = require('fs');
                    fs.appendFile('./test.txt', 'Hii Harshit 2 times...', (err) => {
                        if (err) throw err;
                        console.log('File appended!');
                    });
                - Output => File appended!
            
            - Write the following code in app.js -> in async way with callback
                    var fs = require('fs');
                    fs.appendFile('./test.txt', 'Hii Harshit 2 times...', (err) => {
                        if (err) throw err;
                        console.log('File appended!');
                    });
                - Output => File appended!    
                        
        operations 4 => Delete a file in Current Directory
            - Write the following code in app.js -> in sync way
                    var fs = require('fs');
                    fs.unlinkSync('./test.txt')
                - Output => test.txt deleted!
            
            - Write the following code in app.js -> in async way
                    var fs = require('fs');
                    fs.unlink('./test.txt', (err) => {
                        if (err) throw err;
                        console.log('File deleted!');
                    });
                - Output => File deleted!
            
            - Write the following code in app.js -> in async way with callback
                    var fs = require('fs');
                    fs.unlink('./test.txt', (err) => {
                        if (err) throw err;
                        console.log('File deleted!');
                    });
                - Output => File deleted!

        operations 5 => Rename a file in Current Directory
            - Write the following code in app.js -> in sync way
                    var fs = require('fs');
                    fs.renameSync('./test.txt', './test1.txt')
                - Output => test.txt renamed to test1.txt
            
            - Write the following code in app.js -> in async way
                    var fs = require('fs');
                    fs.rename('./test.txt', './test1.txt', (err) => {
                        if (err) throw err;
                        console.log('File renamed!');
                    });
                - Output => File renamed!
            
            - Write the following code in app.js -> in async way with callback
                    var fs = require('fs');
                    fs.rename('./test.txt', './test1.txt', (err) => {
                        if (err) throw err;
                        console.log('File renamed!');
                    });
                - Output => File renamed!

        operations 6 => get a copy of that file in Current Directory
            - Write the following code in app.js -> in sync way
                    var fs = require('fs');
                    fs.copyFileSync('./test.txt', './test1.txt')
                - Output => test.txt copied to test1.txt
            
            - Write the following code in app.js -> in async way
                    var fs = require('fs');
                    fs.copyFile('./test.txt', './test1.txt', (err) => {
                        if (err) throw err;
                        console.log('File copied!');
                    });
                - Output => File copied!
            
            - Write the following code in app.js -> in async way with callback
                    var fs = require('fs');
                    fs.copyFile('./test.txt', './test1.txt', (err) => {
                        if (err) throw err;
                        console.log('File copied!');
                    });
                - Output => File copied!      

        operations 7 => get a copy of that file in Current Directory
        operations 8 => close a file in Current Directory
        operations 9 => open a file in Current Directory
        operations 10 => get a file status in Current Directory
        operations 11 => get a file information in Current Directory

5. NodeJs Architecture => 
    - NodeJs is a single-threaded, non-blocking, asynchronous, event-driven JavaScript runtime environment.
    - It uses the V8 JavaScript engine to execute JavaScript code.
    - It uses an event loop to handle asynchronous operations.
    - It uses a callback function to handle the result of an asynchronous operation.
    - It uses a thread pool to handle blocking operations.
    - It uses a libuv library to handle I/O operations.
    - It uses a cluster module to create multiple instances of NodeJs to handle multiple requests.
    - It uses a child process module to create child processes to handle multiple requests.
    - It uses a worker thread module to create worker threads to handle multiple requests.

6. Building a Http Server in NodeJs =>     